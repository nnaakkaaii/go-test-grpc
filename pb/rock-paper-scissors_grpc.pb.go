// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: proto/rock-paper-scissors.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RockPaperScissorsServiceClient is the client API for RockPaperScissorsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RockPaperScissorsServiceClient interface {
	// ジャンケンの実施
	PlayGame(ctx context.Context, in *PlayRequest, opts ...grpc.CallOption) (*PlayResponse, error)
	// 結果の確認
	ReportMatchResults(ctx context.Context, in *ReportRequest, opts ...grpc.CallOption) (*ReportResponse, error)
	// 通知
	NotifyMessages(ctx context.Context, in *NotifyRequest, opts ...grpc.CallOption) (RockPaperScissorsService_NotifyMessagesClient, error)
	// 数字を複数アップロードし、合計値を返す
	SumValues(ctx context.Context, opts ...grpc.CallOption) (RockPaperScissorsService_SumValuesClient, error)
	// チャット
	ChatMessages(ctx context.Context, opts ...grpc.CallOption) (RockPaperScissorsService_ChatMessagesClient, error)
}

type rockPaperScissorsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRockPaperScissorsServiceClient(cc grpc.ClientConnInterface) RockPaperScissorsServiceClient {
	return &rockPaperScissorsServiceClient{cc}
}

func (c *rockPaperScissorsServiceClient) PlayGame(ctx context.Context, in *PlayRequest, opts ...grpc.CallOption) (*PlayResponse, error) {
	out := new(PlayResponse)
	err := c.cc.Invoke(ctx, "/game.RockPaperScissorsService/PlayGame", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rockPaperScissorsServiceClient) ReportMatchResults(ctx context.Context, in *ReportRequest, opts ...grpc.CallOption) (*ReportResponse, error) {
	out := new(ReportResponse)
	err := c.cc.Invoke(ctx, "/game.RockPaperScissorsService/ReportMatchResults", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rockPaperScissorsServiceClient) NotifyMessages(ctx context.Context, in *NotifyRequest, opts ...grpc.CallOption) (RockPaperScissorsService_NotifyMessagesClient, error) {
	stream, err := c.cc.NewStream(ctx, &RockPaperScissorsService_ServiceDesc.Streams[0], "/game.RockPaperScissorsService/NotifyMessages", opts...)
	if err != nil {
		return nil, err
	}
	x := &rockPaperScissorsServiceNotifyMessagesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RockPaperScissorsService_NotifyMessagesClient interface {
	Recv() (*NotifyResponse, error)
	grpc.ClientStream
}

type rockPaperScissorsServiceNotifyMessagesClient struct {
	grpc.ClientStream
}

func (x *rockPaperScissorsServiceNotifyMessagesClient) Recv() (*NotifyResponse, error) {
	m := new(NotifyResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *rockPaperScissorsServiceClient) SumValues(ctx context.Context, opts ...grpc.CallOption) (RockPaperScissorsService_SumValuesClient, error) {
	stream, err := c.cc.NewStream(ctx, &RockPaperScissorsService_ServiceDesc.Streams[1], "/game.RockPaperScissorsService/SumValues", opts...)
	if err != nil {
		return nil, err
	}
	x := &rockPaperScissorsServiceSumValuesClient{stream}
	return x, nil
}

type RockPaperScissorsService_SumValuesClient interface {
	Send(*SumRequest) error
	CloseAndRecv() (*SumResponse, error)
	grpc.ClientStream
}

type rockPaperScissorsServiceSumValuesClient struct {
	grpc.ClientStream
}

func (x *rockPaperScissorsServiceSumValuesClient) Send(m *SumRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *rockPaperScissorsServiceSumValuesClient) CloseAndRecv() (*SumResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(SumResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *rockPaperScissorsServiceClient) ChatMessages(ctx context.Context, opts ...grpc.CallOption) (RockPaperScissorsService_ChatMessagesClient, error) {
	stream, err := c.cc.NewStream(ctx, &RockPaperScissorsService_ServiceDesc.Streams[2], "/game.RockPaperScissorsService/ChatMessages", opts...)
	if err != nil {
		return nil, err
	}
	x := &rockPaperScissorsServiceChatMessagesClient{stream}
	return x, nil
}

type RockPaperScissorsService_ChatMessagesClient interface {
	Send(*ChatRequest) error
	Recv() (*ChatResponse, error)
	grpc.ClientStream
}

type rockPaperScissorsServiceChatMessagesClient struct {
	grpc.ClientStream
}

func (x *rockPaperScissorsServiceChatMessagesClient) Send(m *ChatRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *rockPaperScissorsServiceChatMessagesClient) Recv() (*ChatResponse, error) {
	m := new(ChatResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RockPaperScissorsServiceServer is the server API for RockPaperScissorsService service.
// All implementations should embed UnimplementedRockPaperScissorsServiceServer
// for forward compatibility
type RockPaperScissorsServiceServer interface {
	// ジャンケンの実施
	PlayGame(context.Context, *PlayRequest) (*PlayResponse, error)
	// 結果の確認
	ReportMatchResults(context.Context, *ReportRequest) (*ReportResponse, error)
	// 通知
	NotifyMessages(*NotifyRequest, RockPaperScissorsService_NotifyMessagesServer) error
	// 数字を複数アップロードし、合計値を返す
	SumValues(RockPaperScissorsService_SumValuesServer) error
	// チャット
	ChatMessages(RockPaperScissorsService_ChatMessagesServer) error
}

// UnimplementedRockPaperScissorsServiceServer should be embedded to have forward compatible implementations.
type UnimplementedRockPaperScissorsServiceServer struct {
}

func (UnimplementedRockPaperScissorsServiceServer) PlayGame(context.Context, *PlayRequest) (*PlayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlayGame not implemented")
}
func (UnimplementedRockPaperScissorsServiceServer) ReportMatchResults(context.Context, *ReportRequest) (*ReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportMatchResults not implemented")
}
func (UnimplementedRockPaperScissorsServiceServer) NotifyMessages(*NotifyRequest, RockPaperScissorsService_NotifyMessagesServer) error {
	return status.Errorf(codes.Unimplemented, "method NotifyMessages not implemented")
}
func (UnimplementedRockPaperScissorsServiceServer) SumValues(RockPaperScissorsService_SumValuesServer) error {
	return status.Errorf(codes.Unimplemented, "method SumValues not implemented")
}
func (UnimplementedRockPaperScissorsServiceServer) ChatMessages(RockPaperScissorsService_ChatMessagesServer) error {
	return status.Errorf(codes.Unimplemented, "method ChatMessages not implemented")
}

// UnsafeRockPaperScissorsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RockPaperScissorsServiceServer will
// result in compilation errors.
type UnsafeRockPaperScissorsServiceServer interface {
	mustEmbedUnimplementedRockPaperScissorsServiceServer()
}

func RegisterRockPaperScissorsServiceServer(s grpc.ServiceRegistrar, srv RockPaperScissorsServiceServer) {
	s.RegisterService(&RockPaperScissorsService_ServiceDesc, srv)
}

func _RockPaperScissorsService_PlayGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RockPaperScissorsServiceServer).PlayGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/game.RockPaperScissorsService/PlayGame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RockPaperScissorsServiceServer).PlayGame(ctx, req.(*PlayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RockPaperScissorsService_ReportMatchResults_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RockPaperScissorsServiceServer).ReportMatchResults(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/game.RockPaperScissorsService/ReportMatchResults",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RockPaperScissorsServiceServer).ReportMatchResults(ctx, req.(*ReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RockPaperScissorsService_NotifyMessages_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(NotifyRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RockPaperScissorsServiceServer).NotifyMessages(m, &rockPaperScissorsServiceNotifyMessagesServer{stream})
}

type RockPaperScissorsService_NotifyMessagesServer interface {
	Send(*NotifyResponse) error
	grpc.ServerStream
}

type rockPaperScissorsServiceNotifyMessagesServer struct {
	grpc.ServerStream
}

func (x *rockPaperScissorsServiceNotifyMessagesServer) Send(m *NotifyResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _RockPaperScissorsService_SumValues_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RockPaperScissorsServiceServer).SumValues(&rockPaperScissorsServiceSumValuesServer{stream})
}

type RockPaperScissorsService_SumValuesServer interface {
	SendAndClose(*SumResponse) error
	Recv() (*SumRequest, error)
	grpc.ServerStream
}

type rockPaperScissorsServiceSumValuesServer struct {
	grpc.ServerStream
}

func (x *rockPaperScissorsServiceSumValuesServer) SendAndClose(m *SumResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *rockPaperScissorsServiceSumValuesServer) Recv() (*SumRequest, error) {
	m := new(SumRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _RockPaperScissorsService_ChatMessages_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RockPaperScissorsServiceServer).ChatMessages(&rockPaperScissorsServiceChatMessagesServer{stream})
}

type RockPaperScissorsService_ChatMessagesServer interface {
	Send(*ChatResponse) error
	Recv() (*ChatRequest, error)
	grpc.ServerStream
}

type rockPaperScissorsServiceChatMessagesServer struct {
	grpc.ServerStream
}

func (x *rockPaperScissorsServiceChatMessagesServer) Send(m *ChatResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *rockPaperScissorsServiceChatMessagesServer) Recv() (*ChatRequest, error) {
	m := new(ChatRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RockPaperScissorsService_ServiceDesc is the grpc.ServiceDesc for RockPaperScissorsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RockPaperScissorsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "game.RockPaperScissorsService",
	HandlerType: (*RockPaperScissorsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PlayGame",
			Handler:    _RockPaperScissorsService_PlayGame_Handler,
		},
		{
			MethodName: "ReportMatchResults",
			Handler:    _RockPaperScissorsService_ReportMatchResults_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "NotifyMessages",
			Handler:       _RockPaperScissorsService_NotifyMessages_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SumValues",
			Handler:       _RockPaperScissorsService_SumValues_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ChatMessages",
			Handler:       _RockPaperScissorsService_ChatMessages_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/rock-paper-scissors.proto",
}
